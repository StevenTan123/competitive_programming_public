// Queries return leftmost index of the min.

static class SegTree {
    int size;
    int[] a, inds, min, lazy;
    SegTree(int[] aa) {
        size = aa.length;
        a = aa;
        min = new int[size * 4];
        inds = new int[size * 4];
        lazy = new int[size * 4];
        construct(1, 0, size - 1);
    }
    void construct(int v, int l, int r) {
        if (l == r) {
            min[v] = a[l];
            inds[v] = l;
        } else {
            int m = (l + r) / 2;
            construct(v * 2, l, m);
            construct(v * 2 + 1, m + 1, r);
            min[v] = min[v * 2];
            inds[v] = inds[v * 2];
            if (min[v * 2 + 1] < min[v * 2]) {
                min[v] = min[v * 2 + 1];
                inds[v] = inds[v * 2 + 1];
            }
        }
    }
    void push(int v, int l, int r) {
        if (l < r) {
            lazy[v * 2] += lazy[v];
            lazy[v * 2 + 1] += lazy[v];
            min[v * 2] += lazy[v];
            min[v * 2 + 1] += lazy[v];
        }
        lazy[v] = 0;
    }
    void update(int v, int l, int r, int ql, int qr, int add) {
        if (ql > qr) {
            return;
        } else if (l == ql && r == qr) {
            lazy[v] += add;
            min[v] += add;
        } else {
            push(v, l, r);
            int m = (l + r) / 2;
            update(v * 2, l, m, ql, Math.min(m, qr), add);
            update(v * 2 + 1, m + 1, r, Math.max(ql, m + 1), qr, add);
            min[v] = min[v * 2];
            inds[v] = inds[v * 2];
            if (min[v * 2 + 1] < min[v * 2]) {
                min[v] = min[v * 2 + 1];
                inds[v] = inds[v * 2 + 1];
            }
        }
    }
    Pair rmq(int v, int l, int r, int ql, int qr) {
        if (ql > qr) {
            return new Pair(-1, Integer.MAX_VALUE);
        } else if (l == ql && r == qr) {
            return new Pair(inds[v], min[v]);
        } else {
            push(v, l, r);
            int m = (l + r) / 2;
            Pair left = rmq(v * 2, l, m, ql, Math.min(m, qr));
            Pair right = rmq(v * 2 + 1, m + 1, r, Math.max(ql, m + 1), qr);
            if (left.val <= right.val) {
                return left;
            } else {
                return right;
            }
        }
    }
}

static class Pair {
    int ind;
    int val;
    Pair(int i, int v) {
        ind = i;
        val = v;
    }
}